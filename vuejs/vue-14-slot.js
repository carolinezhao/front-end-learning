// 为了让组件可以组合，需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发。
// Vue.js 实现了一个内容分发 API，使用特殊的 <slot> 元素作为原始内容的插槽。

// 编译作用域
// 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。
// ？？一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法。
// 如果要绑定子组件作用域内的指令到一个组件的根节点，应当在子组件自己的模板里做。
// 被分发的内容会在父作用域内编译。

// 单个插槽
// 除非子组件模板包含至少一个 <slot> 插口，否则父组件的内容将会被丢弃。
// 当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 DOM 位置，并替换掉插槽标签本身。
// 最初在 <slot> 标签中的任何内容都被视为备用内容。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。

Vue.component('parent-component', {
    template: `<div>
    <h1>我是父组件的标题</h1>
    <child-component>
      <p>这是一些初始内容</p>
      <p>这是更多的初始内容</p>
    </child-component>
  </div>`,
    data: function () {
        return {}
    }
})

Vue.component('child-component', {
    template: `<div>
               <h2>我是子组件的标题</h2>
               <slot>只有在没有要分发的内容时才会显示。</slot>
               </div>`,
    data: function () {
        return {}
    }
})

var vm = new Vue({
    el: '#app',
    data: {
    },
    methods: {
    }
})