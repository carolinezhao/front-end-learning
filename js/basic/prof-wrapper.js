// 5.6 基本包装类型 Primitive Wrapper Types
// 为了便于操作基本类型值，还提供了 3 个特殊的引用类型：Boolean、Number 和 String。
// 与本章介绍的其他引用类型相似，但同时也具有与各自的基本类型相应的特殊行为。
// 每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，可以调用一些方法操作这些数据。
var s1 = 'some text' // 基本类型值不是对象，从逻辑上讲它们不应该有方法。
var s2 = s1.substring(2) 
console.log(s2)
// 访问s1时，访问过程处于一种读取模式，后台自动完成下列处理：
// 1) 创建 String 类型的一个实例;
// 2) 在实例上调用指定的方法;
// 3) 销毁这个实例。
// 相当于执行如下代码：
// var s1 = new String("some text");
// var s2 = s1.substring(2);
// s1 = null;
// 上面这三个步骤也分别适用于 Boolean 和 Number 类型对应的布尔值和数字值。

// 引用类型与基本包装类型的主要区别就是对象的生存期。
// 使用 new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。
// 自动创建的基本包装类型的对象，只存在于一行代码的执行瞬间，然后立即被销毁。
// 这意味着不能在运行时为基本类型值添加属性和方法。
var str1 = "some text";
str1.color = "red";
console.log(str1.color); // undefined
// 第二行创建的 String 对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的 String 对象，而该对象没有 color 属性。

// 对基本包装类型的实例调用 typeof 会返回"object"，而且所有基本包装类型的对象都会被转换为布尔值 true。