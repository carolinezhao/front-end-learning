// 算法图解 

// 第3章
// 递归：调用自己。
// 每个递归函数都有两个条件：基线条件和递归条件。

// 栈有两种操作：压入和弹出。
// 所有函数调用都进入调用栈。
// 调用栈可能很长 (取决于递归次数)，会占用大量内存。

// 3.3.2 递归调用栈
// 书中图解很有帮助
// 执行过程：先把所有可能的调用(不同参数)压入栈中，然后从顶部逐个调用。
// 栈会记住未完成的函数调用。

function factorial(x) {
    if (x === 1) {
        return 1;
    } else {
        return x * factorial(x-1);
    }
}

console.log(factorial(5));